server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    js_path "/etc/nginx/njs/";
    js_import auth from authorization.js;

    # keeps redirect address for servername if e.g. initiated from webclient served via gams-api
    # e.g. webclient PUT object -> redirects to created object.
    # https://serverfault.com/questions/473647/nginx-loses-port-on-redirect
    proxy_redirect off;

    # access_log  /var/log/nginx/host.access.log  main;

    # set maximum size of client body
    # (needed for ingest e.g. PUT / POST for large data)
    client_max_body_size 10000M;

    # error logs mounted to volume path
    error_log  /etc/nginx/error_log  debug;   

    # main gams-api proxying
    location /api/v1 { 
        # needed for redirections to work initiated by an upstream sub-service
        proxy_set_header        X-Forwarded-Host   $http_host;
        proxy_set_header        X-Forwarded-Proto  http;
        proxy_set_header X-Forwarded-For $remote_addr;

        # Basic auth only for not GET requests.
        auth_basic_user_file /etc/nginx/.htpasswd;
        set $auth_basic Restricted;
        if ( $request_method = GET){
            set $auth_basic off;
        }
        auth_basic $auth_basic;

        # Small authorization based on username = gams project abbreviation
        # Reusing the basic authentication header
        js_set $jwt_payload_sub auth.authorizeForProjectAbbr;
        if ( $jwt_payload_sub = 403){
            return 403;
        }
        proxy_pass   http://gams-api:8080/api/v1;        

    }

    # main gams-api proxying
    location /api/v1/integration { 
        # needed for redirections to work initiated by an upstream sub-service
        proxy_set_header        X-Forwarded-Host   $http_host;
        proxy_set_header        X-Forwarded-Proto  http;
        proxy_set_header X-Forwarded-For $remote_addr;

        # Basic auth only for not GET requests.
        auth_basic_user_file /etc/nginx/.htpasswd;
        set $auth_basic Restricted;
        if ( $request_method = GET){
            set $auth_basic off;
        }
        auth_basic $auth_basic;

        # Small authorization based on username = gams project abbreviation
        # Reusing the basic authentication header
        js_set $jwt_payload_sub auth.authorizeForProjectAbbr;
        if ( $jwt_payload_sub = 403){
            return 403;
        }
        proxy_pass   http://gams-integration-api:8081/api/v1/integration;        

    }



    # proxying static files from gams-api
    location /web_cirilo {
        proxy_pass   http://gams-api:8080/web_cirilo;
    }

    error_page  403     /403.html;
    location = /40x.html {
        root   /etc/nginx/;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

